#include "hip/hip_runtime.h"

#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(30) candidate1(float* __restrict__ I, float* __restrict__ W, float* __restrict__ T_batch_matmul_NT) {
  float T_batch_matmul_NT_local[1];
  __shared__ float I_shared[120];
  __shared__ float W_shared[144];
  T_batch_matmul_NT_local[0] = 0.000000e+00f;
  *(float4*)(I_shared + (((int)threadIdx.x) * 4)) = *(float4*)(I + (((((int)threadIdx.x) / 6) * 768) + ((((int)threadIdx.x) % 6) * 4)));
  W_shared[(((int)threadIdx.x) * 2)] = W[(((((int)blockIdx.x) * 4608) + ((((int)threadIdx.x) / 12) * 768)) + ((((int)threadIdx.x) % 12) * 2))];
  W_shared[((((int)threadIdx.x) * 2) + 1)] = W[((((((int)blockIdx.x) * 4608) + ((((int)threadIdx.x) / 12) * 768)) + ((((int)threadIdx.x) % 12) * 2)) + 1)];
  W_shared[((((int)threadIdx.x) * 2) + 60)] = W[(((((int)blockIdx.x) * 4608) + (((((int)threadIdx.x) + 30) / 12) * 768)) + (((((int)threadIdx.x) * 2) + 12) % 24))];
  W_shared[((((int)threadIdx.x) * 2) + 61)] = W[(((((int)blockIdx.x) * 4608) + (((((int)threadIdx.x) + 30) / 12) * 768)) + (((((int)threadIdx.x) * 2) + 13) % 24))];
  if (((int)threadIdx.x) < 12) {
    W_shared[((((int)threadIdx.x) * 2) + 120)] = W[(((((int)blockIdx.x) * 4608) + (((int)threadIdx.x) * 2)) + 3840)];
    W_shared[((((int)threadIdx.x) * 2) + 121)] = W[(((((int)blockIdx.x) * 4608) + (((int)threadIdx.x) * 2)) + 3841)];
  }
  __syncthreads();
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[((((int)threadIdx.x) / 6) * 24)] * W_shared[((((int)threadIdx.x) % 6) * 24)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 1)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 1)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 2)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 2)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 3)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 3)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 4)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 4)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 5)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 5)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 6)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 6)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 7)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 7)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 8)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 8)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 9)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 9)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 10)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 10)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 11)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 11)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 12)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 12)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 13)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 13)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 14)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 14)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 15)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 15)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 16)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 16)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 17)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 17)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 18)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 18)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 19)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 19)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 20)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 20)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 21)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 21)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 22)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 22)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 23)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 23)]));
  __syncthreads();
  *(float4*)(I_shared + (((int)threadIdx.x) * 4)) = *(float4*)(I + ((((((int)threadIdx.x) / 6) * 768) + ((((int)threadIdx.x) % 6) * 4)) + 24));
  W_shared[(((int)threadIdx.x) * 2)] = W[((((((int)blockIdx.x) * 4608) + ((((int)threadIdx.x) / 12) * 768)) + ((((int)threadIdx.x) % 12) * 2)) + 24)];
  W_shared[((((int)threadIdx.x) * 2) + 1)] = W[((((((int)blockIdx.x) * 4608) + ((((int)threadIdx.x) / 12) * 768)) + ((((int)threadIdx.x) % 12) * 2)) + 25)];
  W_shared[((((int)threadIdx.x) * 2) + 60)] = W[((((((int)blockIdx.x) * 4608) + (((((int)threadIdx.x) + 30) / 12) * 768)) + (((((int)threadIdx.x) * 2) + 12) % 24)) + 24)];
  W_shared[((((int)threadIdx.x) * 2) + 61)] = W[((((((int)blockIdx.x) * 4608) + (((((int)threadIdx.x) + 30) / 12) * 768)) + (((((int)threadIdx.x) * 2) + 13) % 24)) + 24)];
  if (((int)threadIdx.x) < 12) {
    W_shared[((((int)threadIdx.x) * 2) + 120)] = W[(((((int)blockIdx.x) * 4608) + (((int)threadIdx.x) * 2)) + 3864)];
    W_shared[((((int)threadIdx.x) * 2) + 121)] = W[(((((int)blockIdx.x) * 4608) + (((int)threadIdx.x) * 2)) + 3865)];
  }
  __syncthreads();
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[((((int)threadIdx.x) / 6) * 24)] * W_shared[((((int)threadIdx.x) % 6) * 24)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 1)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 1)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 2)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 2)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 3)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 3)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 4)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 4)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 5)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 5)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 6)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 6)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 7)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 7)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 8)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 8)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 9)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 9)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 10)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 10)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 11)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 11)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 12)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 12)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 13)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 13)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 14)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 14)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 15)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 15)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 16)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 16)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 17)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 17)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 18)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 18)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 19)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 19)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 20)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 20)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 21)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 21)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 22)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 22)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 23)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 23)]));
  __syncthreads();
  *(float4*)(I_shared + (((int)threadIdx.x) * 4)) = *(float4*)(I + ((((((int)threadIdx.x) / 6) * 768) + ((((int)threadIdx.x) % 6) * 4)) + 48));
  W_shared[(((int)threadIdx.x) * 2)] = W[((((((int)blockIdx.x) * 4608) + ((((int)threadIdx.x) / 12) * 768)) + ((((int)threadIdx.x) % 12) * 2)) + 48)];
  W_shared[((((int)threadIdx.x) * 2) + 1)] = W[((((((int)blockIdx.x) * 4608) + ((((int)threadIdx.x) / 12) * 768)) + ((((int)threadIdx.x) % 12) * 2)) + 49)];
  W_shared[((((int)threadIdx.x) * 2) + 60)] = W[((((((int)blockIdx.x) * 4608) + (((((int)threadIdx.x) + 30) / 12) * 768)) + (((((int)threadIdx.x) * 2) + 12) % 24)) + 48)];
  W_shared[((((int)threadIdx.x) * 2) + 61)] = W[((((((int)blockIdx.x) * 4608) + (((((int)threadIdx.x) + 30) / 12) * 768)) + (((((int)threadIdx.x) * 2) + 13) % 24)) + 48)];
  if (((int)threadIdx.x) < 12) {
    W_shared[((((int)threadIdx.x) * 2) + 120)] = W[(((((int)blockIdx.x) * 4608) + (((int)threadIdx.x) * 2)) + 3888)];
    W_shared[((((int)threadIdx.x) * 2) + 121)] = W[(((((int)blockIdx.x) * 4608) + (((int)threadIdx.x) * 2)) + 3889)];
  }
  __syncthreads();
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[((((int)threadIdx.x) / 6) * 24)] * W_shared[((((int)threadIdx.x) % 6) * 24)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 1)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 1)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 2)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 2)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 3)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 3)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 4)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 4)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 5)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 5)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 6)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 6)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 7)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 7)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 8)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 8)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 9)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 9)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 10)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 10)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 11)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 11)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 12)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 12)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 13)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 13)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 14)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 14)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 15)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 15)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 16)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 16)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 17)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 17)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 18)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 18)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 19)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 19)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 20)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 20)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 21)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 21)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 22)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 22)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 23)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 23)]));
  __syncthreads();
  *(float4*)(I_shared + (((int)threadIdx.x) * 4)) = *(float4*)(I + ((((((int)threadIdx.x) / 6) * 768) + ((((int)threadIdx.x) % 6) * 4)) + 72));
  W_shared[(((int)threadIdx.x) * 2)] = W[((((((int)blockIdx.x) * 4608) + ((((int)threadIdx.x) / 12) * 768)) + ((((int)threadIdx.x) % 12) * 2)) + 72)];
  W_shared[((((int)threadIdx.x) * 2) + 1)] = W[((((((int)blockIdx.x) * 4608) + ((((int)threadIdx.x) / 12) * 768)) + ((((int)threadIdx.x) % 12) * 2)) + 73)];
  W_shared[((((int)threadIdx.x) * 2) + 60)] = W[((((((int)blockIdx.x) * 4608) + (((((int)threadIdx.x) + 30) / 12) * 768)) + (((((int)threadIdx.x) * 2) + 12) % 24)) + 72)];
  W_shared[((((int)threadIdx.x) * 2) + 61)] = W[((((((int)blockIdx.x) * 4608) + (((((int)threadIdx.x) + 30) / 12) * 768)) + (((((int)threadIdx.x) * 2) + 13) % 24)) + 72)];
  if (((int)threadIdx.x) < 12) {
    W_shared[((((int)threadIdx.x) * 2) + 120)] = W[(((((int)blockIdx.x) * 4608) + (((int)threadIdx.x) * 2)) + 3912)];
    W_shared[((((int)threadIdx.x) * 2) + 121)] = W[(((((int)blockIdx.x) * 4608) + (((int)threadIdx.x) * 2)) + 3913)];
  }
  __syncthreads();
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[((((int)threadIdx.x) / 6) * 24)] * W_shared[((((int)threadIdx.x) % 6) * 24)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 1)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 1)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 2)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 2)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 3)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 3)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 4)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 4)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 5)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 5)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 6)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 6)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 7)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 7)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 8)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 8)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 9)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 9)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 10)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 10)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 11)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 11)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 12)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 12)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 13)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 13)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 14)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 14)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 15)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 15)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 16)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 16)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 17)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 17)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 18)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 18)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 19)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 19)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 20)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 20)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 21)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 21)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 22)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 22)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 23)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 23)]));
  __syncthreads();
  *(float4*)(I_shared + (((int)threadIdx.x) * 4)) = *(float4*)(I + ((((((int)threadIdx.x) / 6) * 768) + ((((int)threadIdx.x) % 6) * 4)) + 96));
  W_shared[(((int)threadIdx.x) * 2)] = W[((((((int)blockIdx.x) * 4608) + ((((int)threadIdx.x) / 12) * 768)) + ((((int)threadIdx.x) % 12) * 2)) + 96)];
  W_shared[((((int)threadIdx.x) * 2) + 1)] = W[((((((int)blockIdx.x) * 4608) + ((((int)threadIdx.x) / 12) * 768)) + ((((int)threadIdx.x) % 12) * 2)) + 97)];
  W_shared[((((int)threadIdx.x) * 2) + 60)] = W[((((((int)blockIdx.x) * 4608) + (((((int)threadIdx.x) + 30) / 12) * 768)) + (((((int)threadIdx.x) * 2) + 12) % 24)) + 96)];
  W_shared[((((int)threadIdx.x) * 2) + 61)] = W[((((((int)blockIdx.x) * 4608) + (((((int)threadIdx.x) + 30) / 12) * 768)) + (((((int)threadIdx.x) * 2) + 13) % 24)) + 96)];
  if (((int)threadIdx.x) < 12) {
    W_shared[((((int)threadIdx.x) * 2) + 120)] = W[(((((int)blockIdx.x) * 4608) + (((int)threadIdx.x) * 2)) + 3936)];
    W_shared[((((int)threadIdx.x) * 2) + 121)] = W[(((((int)blockIdx.x) * 4608) + (((int)threadIdx.x) * 2)) + 3937)];
  }
  __syncthreads();
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[((((int)threadIdx.x) / 6) * 24)] * W_shared[((((int)threadIdx.x) % 6) * 24)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 1)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 1)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 2)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 2)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 3)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 3)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 4)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 4)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 5)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 5)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 6)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 6)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 7)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 7)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 8)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 8)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 9)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 9)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 10)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 10)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 11)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 11)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 12)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 12)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 13)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 13)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 14)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 14)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 15)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 15)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 16)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 16)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 17)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 17)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 18)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 18)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 19)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 19)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 20)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 20)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 21)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 21)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 22)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 22)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 23)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 23)]));
  __syncthreads();
  *(float4*)(I_shared + (((int)threadIdx.x) * 4)) = *(float4*)(I + ((((((int)threadIdx.x) / 6) * 768) + ((((int)threadIdx.x) % 6) * 4)) + 120));
  W_shared[(((int)threadIdx.x) * 2)] = W[((((((int)blockIdx.x) * 4608) + ((((int)threadIdx.x) / 12) * 768)) + ((((int)threadIdx.x) % 12) * 2)) + 120)];
  W_shared[((((int)threadIdx.x) * 2) + 1)] = W[((((((int)blockIdx.x) * 4608) + ((((int)threadIdx.x) / 12) * 768)) + ((((int)threadIdx.x) % 12) * 2)) + 121)];
  W_shared[((((int)threadIdx.x) * 2) + 60)] = W[((((((int)blockIdx.x) * 4608) + (((((int)threadIdx.x) + 30) / 12) * 768)) + (((((int)threadIdx.x) * 2) + 12) % 24)) + 120)];
  W_shared[((((int)threadIdx.x) * 2) + 61)] = W[((((((int)blockIdx.x) * 4608) + (((((int)threadIdx.x) + 30) / 12) * 768)) + (((((int)threadIdx.x) * 2) + 13) % 24)) + 120)];
  if (((int)threadIdx.x) < 12) {
    W_shared[((((int)threadIdx.x) * 2) + 120)] = W[(((((int)blockIdx.x) * 4608) + (((int)threadIdx.x) * 2)) + 3960)];
    W_shared[((((int)threadIdx.x) * 2) + 121)] = W[(((((int)blockIdx.x) * 4608) + (((int)threadIdx.x) * 2)) + 3961)];
  }
  __syncthreads();
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[((((int)threadIdx.x) / 6) * 24)] * W_shared[((((int)threadIdx.x) % 6) * 24)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 1)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 1)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 2)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 2)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 3)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 3)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 4)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 4)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 5)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 5)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 6)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 6)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 7)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 7)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 8)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 8)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 9)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 9)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 10)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 10)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 11)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 11)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 12)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 12)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 13)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 13)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 14)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 14)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 15)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 15)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 16)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 16)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 17)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 17)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 18)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 18)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 19)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 19)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 20)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 20)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 21)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 21)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 22)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 22)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 23)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 23)]));
  __syncthreads();
  *(float4*)(I_shared + (((int)threadIdx.x) * 4)) = *(float4*)(I + ((((((int)threadIdx.x) / 6) * 768) + ((((int)threadIdx.x) % 6) * 4)) + 144));
  W_shared[(((int)threadIdx.x) * 2)] = W[((((((int)blockIdx.x) * 4608) + ((((int)threadIdx.x) / 12) * 768)) + ((((int)threadIdx.x) % 12) * 2)) + 144)];
  W_shared[((((int)threadIdx.x) * 2) + 1)] = W[((((((int)blockIdx.x) * 4608) + ((((int)threadIdx.x) / 12) * 768)) + ((((int)threadIdx.x) % 12) * 2)) + 145)];
  W_shared[((((int)threadIdx.x) * 2) + 60)] = W[((((((int)blockIdx.x) * 4608) + (((((int)threadIdx.x) + 30) / 12) * 768)) + (((((int)threadIdx.x) * 2) + 12) % 24)) + 144)];
  W_shared[((((int)threadIdx.x) * 2) + 61)] = W[((((((int)blockIdx.x) * 4608) + (((((int)threadIdx.x) + 30) / 12) * 768)) + (((((int)threadIdx.x) * 2) + 13) % 24)) + 144)];
  if (((int)threadIdx.x) < 12) {
    W_shared[((((int)threadIdx.x) * 2) + 120)] = W[(((((int)blockIdx.x) * 4608) + (((int)threadIdx.x) * 2)) + 3984)];
    W_shared[((((int)threadIdx.x) * 2) + 121)] = W[(((((int)blockIdx.x) * 4608) + (((int)threadIdx.x) * 2)) + 3985)];
  }
  __syncthreads();
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[((((int)threadIdx.x) / 6) * 24)] * W_shared[((((int)threadIdx.x) % 6) * 24)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 1)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 1)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 2)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 2)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 3)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 3)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 4)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 4)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 5)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 5)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 6)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 6)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 7)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 7)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 8)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 8)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 9)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 9)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 10)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 10)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 11)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 11)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 12)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 12)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 13)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 13)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 14)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 14)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 15)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 15)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 16)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 16)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 17)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 17)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 18)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 18)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 19)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 19)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 20)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 20)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 21)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 21)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 22)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 22)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 23)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 23)]));
  __syncthreads();
  *(float4*)(I_shared + (((int)threadIdx.x) * 4)) = *(float4*)(I + ((((((int)threadIdx.x) / 6) * 768) + ((((int)threadIdx.x) % 6) * 4)) + 168));
  W_shared[(((int)threadIdx.x) * 2)] = W[((((((int)blockIdx.x) * 4608) + ((((int)threadIdx.x) / 12) * 768)) + ((((int)threadIdx.x) % 12) * 2)) + 168)];
  W_shared[((((int)threadIdx.x) * 2) + 1)] = W[((((((int)blockIdx.x) * 4608) + ((((int)threadIdx.x) / 12) * 768)) + ((((int)threadIdx.x) % 12) * 2)) + 169)];
  W_shared[((((int)threadIdx.x) * 2) + 60)] = W[((((((int)blockIdx.x) * 4608) + (((((int)threadIdx.x) + 30) / 12) * 768)) + (((((int)threadIdx.x) * 2) + 12) % 24)) + 168)];
  W_shared[((((int)threadIdx.x) * 2) + 61)] = W[((((((int)blockIdx.x) * 4608) + (((((int)threadIdx.x) + 30) / 12) * 768)) + (((((int)threadIdx.x) * 2) + 13) % 24)) + 168)];
  if (((int)threadIdx.x) < 12) {
    W_shared[((((int)threadIdx.x) * 2) + 120)] = W[(((((int)blockIdx.x) * 4608) + (((int)threadIdx.x) * 2)) + 4008)];
    W_shared[((((int)threadIdx.x) * 2) + 121)] = W[(((((int)blockIdx.x) * 4608) + (((int)threadIdx.x) * 2)) + 4009)];
  }
  __syncthreads();
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[((((int)threadIdx.x) / 6) * 24)] * W_shared[((((int)threadIdx.x) % 6) * 24)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 1)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 1)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 2)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 2)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 3)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 3)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 4)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 4)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 5)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 5)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 6)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 6)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 7)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 7)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 8)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 8)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 9)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 9)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 10)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 10)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 11)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 11)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 12)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 12)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 13)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 13)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 14)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 14)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 15)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 15)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 16)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 16)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 17)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 17)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 18)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 18)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 19)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 19)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 20)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 20)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 21)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 21)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 22)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 22)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 23)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 23)]));
  __syncthreads();
  *(float4*)(I_shared + (((int)threadIdx.x) * 4)) = *(float4*)(I + ((((((int)threadIdx.x) / 6) * 768) + ((((int)threadIdx.x) % 6) * 4)) + 192));
  W_shared[(((int)threadIdx.x) * 2)] = W[((((((int)blockIdx.x) * 4608) + ((((int)threadIdx.x) / 12) * 768)) + ((((int)threadIdx.x) % 12) * 2)) + 192)];
  W_shared[((((int)threadIdx.x) * 2) + 1)] = W[((((((int)blockIdx.x) * 4608) + ((((int)threadIdx.x) / 12) * 768)) + ((((int)threadIdx.x) % 12) * 2)) + 193)];
  W_shared[((((int)threadIdx.x) * 2) + 60)] = W[((((((int)blockIdx.x) * 4608) + (((((int)threadIdx.x) + 30) / 12) * 768)) + (((((int)threadIdx.x) * 2) + 12) % 24)) + 192)];
  W_shared[((((int)threadIdx.x) * 2) + 61)] = W[((((((int)blockIdx.x) * 4608) + (((((int)threadIdx.x) + 30) / 12) * 768)) + (((((int)threadIdx.x) * 2) + 13) % 24)) + 192)];
  if (((int)threadIdx.x) < 12) {
    W_shared[((((int)threadIdx.x) * 2) + 120)] = W[(((((int)blockIdx.x) * 4608) + (((int)threadIdx.x) * 2)) + 4032)];
    W_shared[((((int)threadIdx.x) * 2) + 121)] = W[(((((int)blockIdx.x) * 4608) + (((int)threadIdx.x) * 2)) + 4033)];
  }
  __syncthreads();
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[((((int)threadIdx.x) / 6) * 24)] * W_shared[((((int)threadIdx.x) % 6) * 24)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 1)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 1)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 2)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 2)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 3)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 3)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 4)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 4)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 5)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 5)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 6)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 6)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 7)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 7)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 8)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 8)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 9)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 9)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 10)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 10)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 11)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 11)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 12)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 12)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 13)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 13)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 14)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 14)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 15)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 15)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 16)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 16)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 17)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 17)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 18)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 18)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 19)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 19)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 20)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 20)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 21)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 21)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 22)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 22)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 23)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 23)]));
  __syncthreads();
  *(float4*)(I_shared + (((int)threadIdx.x) * 4)) = *(float4*)(I + ((((((int)threadIdx.x) / 6) * 768) + ((((int)threadIdx.x) % 6) * 4)) + 216));
  W_shared[(((int)threadIdx.x) * 2)] = W[((((((int)blockIdx.x) * 4608) + ((((int)threadIdx.x) / 12) * 768)) + ((((int)threadIdx.x) % 12) * 2)) + 216)];
  W_shared[((((int)threadIdx.x) * 2) + 1)] = W[((((((int)blockIdx.x) * 4608) + ((((int)threadIdx.x) / 12) * 768)) + ((((int)threadIdx.x) % 12) * 2)) + 217)];
  W_shared[((((int)threadIdx.x) * 2) + 60)] = W[((((((int)blockIdx.x) * 4608) + (((((int)threadIdx.x) + 30) / 12) * 768)) + (((((int)threadIdx.x) * 2) + 12) % 24)) + 216)];
  W_shared[((((int)threadIdx.x) * 2) + 61)] = W[((((((int)blockIdx.x) * 4608) + (((((int)threadIdx.x) + 30) / 12) * 768)) + (((((int)threadIdx.x) * 2) + 13) % 24)) + 216)];
  if (((int)threadIdx.x) < 12) {
    W_shared[((((int)threadIdx.x) * 2) + 120)] = W[(((((int)blockIdx.x) * 4608) + (((int)threadIdx.x) * 2)) + 4056)];
    W_shared[((((int)threadIdx.x) * 2) + 121)] = W[(((((int)blockIdx.x) * 4608) + (((int)threadIdx.x) * 2)) + 4057)];
  }
  __syncthreads();
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[((((int)threadIdx.x) / 6) * 24)] * W_shared[((((int)threadIdx.x) % 6) * 24)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 1)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 1)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 2)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 2)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 3)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 3)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 4)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 4)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 5)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 5)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 6)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 6)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 7)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 7)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 8)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 8)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 9)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 9)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 10)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 10)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 11)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 11)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 12)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 12)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 13)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 13)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 14)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 14)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 15)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 15)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 16)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 16)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 17)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 17)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 18)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 18)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 19)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 19)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 20)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 20)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 21)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 21)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 22)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 22)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 23)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 23)]));
  __syncthreads();
  *(float4*)(I_shared + (((int)threadIdx.x) * 4)) = *(float4*)(I + ((((((int)threadIdx.x) / 6) * 768) + ((((int)threadIdx.x) % 6) * 4)) + 240));
  W_shared[(((int)threadIdx.x) * 2)] = W[((((((int)blockIdx.x) * 4608) + ((((int)threadIdx.x) / 12) * 768)) + ((((int)threadIdx.x) % 12) * 2)) + 240)];
  W_shared[((((int)threadIdx.x) * 2) + 1)] = W[((((((int)blockIdx.x) * 4608) + ((((int)threadIdx.x) / 12) * 768)) + ((((int)threadIdx.x) % 12) * 2)) + 241)];
  W_shared[((((int)threadIdx.x) * 2) + 60)] = W[((((((int)blockIdx.x) * 4608) + (((((int)threadIdx.x) + 30) / 12) * 768)) + (((((int)threadIdx.x) * 2) + 12) % 24)) + 240)];
  W_shared[((((int)threadIdx.x) * 2) + 61)] = W[((((((int)blockIdx.x) * 4608) + (((((int)threadIdx.x) + 30) / 12) * 768)) + (((((int)threadIdx.x) * 2) + 13) % 24)) + 240)];
  if (((int)threadIdx.x) < 12) {
    W_shared[((((int)threadIdx.x) * 2) + 120)] = W[(((((int)blockIdx.x) * 4608) + (((int)threadIdx.x) * 2)) + 4080)];
    W_shared[((((int)threadIdx.x) * 2) + 121)] = W[(((((int)blockIdx.x) * 4608) + (((int)threadIdx.x) * 2)) + 4081)];
  }
  __syncthreads();
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[((((int)threadIdx.x) / 6) * 24)] * W_shared[((((int)threadIdx.x) % 6) * 24)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 1)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 1)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 2)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 2)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 3)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 3)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 4)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 4)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 5)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 5)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 6)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 6)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 7)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 7)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 8)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 8)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 9)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 9)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 10)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 10)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 11)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 11)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 12)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 12)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 13)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 13)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 14)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 14)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 15)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 15)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 16)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 16)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 17)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 17)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 18)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 18)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 19)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 19)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 20)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 20)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 21)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 21)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 22)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 22)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 23)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 23)]));
  __syncthreads();
  *(float4*)(I_shared + (((int)threadIdx.x) * 4)) = *(float4*)(I + ((((((int)threadIdx.x) / 6) * 768) + ((((int)threadIdx.x) % 6) * 4)) + 264));
  W_shared[(((int)threadIdx.x) * 2)] = W[((((((int)blockIdx.x) * 4608) + ((((int)threadIdx.x) / 12) * 768)) + ((((int)threadIdx.x) % 12) * 2)) + 264)];
  W_shared[((((int)threadIdx.x) * 2) + 1)] = W[((((((int)blockIdx.x) * 4608) + ((((int)threadIdx.x) / 12) * 768)) + ((((int)threadIdx.x) % 12) * 2)) + 265)];
  W_shared[((((int)threadIdx.x) * 2) + 60)] = W[((((((int)blockIdx.x) * 4608) + (((((int)threadIdx.x) + 30) / 12) * 768)) + (((((int)threadIdx.x) * 2) + 12) % 24)) + 264)];
  W_shared[((((int)threadIdx.x) * 2) + 61)] = W[((((((int)blockIdx.x) * 4608) + (((((int)threadIdx.x) + 30) / 12) * 768)) + (((((int)threadIdx.x) * 2) + 13) % 24)) + 264)];
  if (((int)threadIdx.x) < 12) {
    W_shared[((((int)threadIdx.x) * 2) + 120)] = W[(((((int)blockIdx.x) * 4608) + (((int)threadIdx.x) * 2)) + 4104)];
    W_shared[((((int)threadIdx.x) * 2) + 121)] = W[(((((int)blockIdx.x) * 4608) + (((int)threadIdx.x) * 2)) + 4105)];
  }
  __syncthreads();
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[((((int)threadIdx.x) / 6) * 24)] * W_shared[((((int)threadIdx.x) % 6) * 24)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 1)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 1)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 2)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 2)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 3)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 3)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 4)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 4)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 5)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 5)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 6)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 6)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 7)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 7)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 8)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 8)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 9)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 9)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 10)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 10)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 11)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 11)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 12)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 12)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 13)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 13)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 14)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 14)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 15)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 15)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 16)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 16)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 17)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 17)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 18)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 18)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 19)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 19)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 20)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 20)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 21)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 21)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 22)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 22)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 23)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 23)]));
  __syncthreads();
  *(float4*)(I_shared + (((int)threadIdx.x) * 4)) = *(float4*)(I + ((((((int)threadIdx.x) / 6) * 768) + ((((int)threadIdx.x) % 6) * 4)) + 288));
  W_shared[(((int)threadIdx.x) * 2)] = W[((((((int)blockIdx.x) * 4608) + ((((int)threadIdx.x) / 12) * 768)) + ((((int)threadIdx.x) % 12) * 2)) + 288)];
  W_shared[((((int)threadIdx.x) * 2) + 1)] = W[((((((int)blockIdx.x) * 4608) + ((((int)threadIdx.x) / 12) * 768)) + ((((int)threadIdx.x) % 12) * 2)) + 289)];
  W_shared[((((int)threadIdx.x) * 2) + 60)] = W[((((((int)blockIdx.x) * 4608) + (((((int)threadIdx.x) + 30) / 12) * 768)) + (((((int)threadIdx.x) * 2) + 12) % 24)) + 288)];
  W_shared[((((int)threadIdx.x) * 2) + 61)] = W[((((((int)blockIdx.x) * 4608) + (((((int)threadIdx.x) + 30) / 12) * 768)) + (((((int)threadIdx.x) * 2) + 13) % 24)) + 288)];
  if (((int)threadIdx.x) < 12) {
    W_shared[((((int)threadIdx.x) * 2) + 120)] = W[(((((int)blockIdx.x) * 4608) + (((int)threadIdx.x) * 2)) + 4128)];
    W_shared[((((int)threadIdx.x) * 2) + 121)] = W[(((((int)blockIdx.x) * 4608) + (((int)threadIdx.x) * 2)) + 4129)];
  }
  __syncthreads();
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[((((int)threadIdx.x) / 6) * 24)] * W_shared[((((int)threadIdx.x) % 6) * 24)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 1)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 1)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 2)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 2)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 3)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 3)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 4)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 4)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 5)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 5)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 6)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 6)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 7)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 7)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 8)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 8)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 9)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 9)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 10)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 10)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 11)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 11)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 12)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 12)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 13)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 13)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 14)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 14)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 15)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 15)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 16)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 16)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 17)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 17)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 18)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 18)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 19)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 19)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 20)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 20)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 21)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 21)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 22)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 22)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 23)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 23)]));
  __syncthreads();
  *(float4*)(I_shared + (((int)threadIdx.x) * 4)) = *(float4*)(I + ((((((int)threadIdx.x) / 6) * 768) + ((((int)threadIdx.x) % 6) * 4)) + 312));
  W_shared[(((int)threadIdx.x) * 2)] = W[((((((int)blockIdx.x) * 4608) + ((((int)threadIdx.x) / 12) * 768)) + ((((int)threadIdx.x) % 12) * 2)) + 312)];
  W_shared[((((int)threadIdx.x) * 2) + 1)] = W[((((((int)blockIdx.x) * 4608) + ((((int)threadIdx.x) / 12) * 768)) + ((((int)threadIdx.x) % 12) * 2)) + 313)];
  W_shared[((((int)threadIdx.x) * 2) + 60)] = W[((((((int)blockIdx.x) * 4608) + (((((int)threadIdx.x) + 30) / 12) * 768)) + (((((int)threadIdx.x) * 2) + 12) % 24)) + 312)];
  W_shared[((((int)threadIdx.x) * 2) + 61)] = W[((((((int)blockIdx.x) * 4608) + (((((int)threadIdx.x) + 30) / 12) * 768)) + (((((int)threadIdx.x) * 2) + 13) % 24)) + 312)];
  if (((int)threadIdx.x) < 12) {
    W_shared[((((int)threadIdx.x) * 2) + 120)] = W[(((((int)blockIdx.x) * 4608) + (((int)threadIdx.x) * 2)) + 4152)];
    W_shared[((((int)threadIdx.x) * 2) + 121)] = W[(((((int)blockIdx.x) * 4608) + (((int)threadIdx.x) * 2)) + 4153)];
  }
  __syncthreads();
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[((((int)threadIdx.x) / 6) * 24)] * W_shared[((((int)threadIdx.x) % 6) * 24)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 1)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 1)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 2)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 2)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 3)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 3)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 4)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 4)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 5)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 5)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 6)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 6)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 7)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 7)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 8)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 8)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 9)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 9)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 10)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 10)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 11)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 11)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 12)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 12)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 13)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 13)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 14)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 14)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 15)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 15)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 16)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 16)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 17)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 17)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 18)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 18)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 19)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 19)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 20)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 20)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 21)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 21)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 22)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 22)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 23)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 23)]));
  __syncthreads();
  *(float4*)(I_shared + (((int)threadIdx.x) * 4)) = *(float4*)(I + ((((((int)threadIdx.x) / 6) * 768) + ((((int)threadIdx.x) % 6) * 4)) + 336));
  W_shared[(((int)threadIdx.x) * 2)] = W[((((((int)blockIdx.x) * 4608) + ((((int)threadIdx.x) / 12) * 768)) + ((((int)threadIdx.x) % 12) * 2)) + 336)];
  W_shared[((((int)threadIdx.x) * 2) + 1)] = W[((((((int)blockIdx.x) * 4608) + ((((int)threadIdx.x) / 12) * 768)) + ((((int)threadIdx.x) % 12) * 2)) + 337)];
  W_shared[((((int)threadIdx.x) * 2) + 60)] = W[((((((int)blockIdx.x) * 4608) + (((((int)threadIdx.x) + 30) / 12) * 768)) + (((((int)threadIdx.x) * 2) + 12) % 24)) + 336)];
  W_shared[((((int)threadIdx.x) * 2) + 61)] = W[((((((int)blockIdx.x) * 4608) + (((((int)threadIdx.x) + 30) / 12) * 768)) + (((((int)threadIdx.x) * 2) + 13) % 24)) + 336)];
  if (((int)threadIdx.x) < 12) {
    W_shared[((((int)threadIdx.x) * 2) + 120)] = W[(((((int)blockIdx.x) * 4608) + (((int)threadIdx.x) * 2)) + 4176)];
    W_shared[((((int)threadIdx.x) * 2) + 121)] = W[(((((int)blockIdx.x) * 4608) + (((int)threadIdx.x) * 2)) + 4177)];
  }
  __syncthreads();
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[((((int)threadIdx.x) / 6) * 24)] * W_shared[((((int)threadIdx.x) % 6) * 24)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 1)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 1)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 2)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 2)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 3)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 3)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 4)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 4)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 5)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 5)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 6)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 6)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 7)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 7)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 8)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 8)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 9)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 9)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 10)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 10)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 11)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 11)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 12)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 12)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 13)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 13)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 14)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 14)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 15)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 15)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 16)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 16)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 17)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 17)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 18)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 18)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 19)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 19)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 20)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 20)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 21)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 21)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 22)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 22)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 23)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 23)]));
  __syncthreads();
  *(float4*)(I_shared + (((int)threadIdx.x) * 4)) = *(float4*)(I + ((((((int)threadIdx.x) / 6) * 768) + ((((int)threadIdx.x) % 6) * 4)) + 360));
  W_shared[(((int)threadIdx.x) * 2)] = W[((((((int)blockIdx.x) * 4608) + ((((int)threadIdx.x) / 12) * 768)) + ((((int)threadIdx.x) % 12) * 2)) + 360)];
  W_shared[((((int)threadIdx.x) * 2) + 1)] = W[((((((int)blockIdx.x) * 4608) + ((((int)threadIdx.x) / 12) * 768)) + ((((int)threadIdx.x) % 12) * 2)) + 361)];
  W_shared[((((int)threadIdx.x) * 2) + 60)] = W[((((((int)blockIdx.x) * 4608) + (((((int)threadIdx.x) + 30) / 12) * 768)) + (((((int)threadIdx.x) * 2) + 12) % 24)) + 360)];
  W_shared[((((int)threadIdx.x) * 2) + 61)] = W[((((((int)blockIdx.x) * 4608) + (((((int)threadIdx.x) + 30) / 12) * 768)) + (((((int)threadIdx.x) * 2) + 13) % 24)) + 360)];
  if (((int)threadIdx.x) < 12) {
    W_shared[((((int)threadIdx.x) * 2) + 120)] = W[(((((int)blockIdx.x) * 4608) + (((int)threadIdx.x) * 2)) + 4200)];
    W_shared[((((int)threadIdx.x) * 2) + 121)] = W[(((((int)blockIdx.x) * 4608) + (((int)threadIdx.x) * 2)) + 4201)];
  }
  __syncthreads();
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[((((int)threadIdx.x) / 6) * 24)] * W_shared[((((int)threadIdx.x) % 6) * 24)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 1)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 1)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 2)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 2)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 3)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 3)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 4)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 4)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 5)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 5)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 6)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 6)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 7)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 7)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 8)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 8)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 9)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 9)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 10)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 10)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 11)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 11)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 12)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 12)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 13)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 13)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 14)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 14)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 15)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 15)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 16)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 16)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 17)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 17)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 18)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 18)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 19)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 19)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 20)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 20)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 21)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 21)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 22)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 22)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 23)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 23)]));
  __syncthreads();
  *(float4*)(I_shared + (((int)threadIdx.x) * 4)) = *(float4*)(I + ((((((int)threadIdx.x) / 6) * 768) + ((((int)threadIdx.x) % 6) * 4)) + 384));
  W_shared[(((int)threadIdx.x) * 2)] = W[((((((int)blockIdx.x) * 4608) + ((((int)threadIdx.x) / 12) * 768)) + ((((int)threadIdx.x) % 12) * 2)) + 384)];
  W_shared[((((int)threadIdx.x) * 2) + 1)] = W[((((((int)blockIdx.x) * 4608) + ((((int)threadIdx.x) / 12) * 768)) + ((((int)threadIdx.x) % 12) * 2)) + 385)];
  W_shared[((((int)threadIdx.x) * 2) + 60)] = W[((((((int)blockIdx.x) * 4608) + (((((int)threadIdx.x) + 30) / 12) * 768)) + (((((int)threadIdx.x) * 2) + 12) % 24)) + 384)];
  W_shared[((((int)threadIdx.x) * 2) + 61)] = W[((((((int)blockIdx.x) * 4608) + (((((int)threadIdx.x) + 30) / 12) * 768)) + (((((int)threadIdx.x) * 2) + 13) % 24)) + 384)];
  if (((int)threadIdx.x) < 12) {
    W_shared[((((int)threadIdx.x) * 2) + 120)] = W[(((((int)blockIdx.x) * 4608) + (((int)threadIdx.x) * 2)) + 4224)];
    W_shared[((((int)threadIdx.x) * 2) + 121)] = W[(((((int)blockIdx.x) * 4608) + (((int)threadIdx.x) * 2)) + 4225)];
  }
  __syncthreads();
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[((((int)threadIdx.x) / 6) * 24)] * W_shared[((((int)threadIdx.x) % 6) * 24)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 1)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 1)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 2)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 2)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 3)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 3)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 4)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 4)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 5)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 5)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 6)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 6)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 7)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 7)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 8)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 8)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 9)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 9)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 10)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 10)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 11)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 11)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 12)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 12)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 13)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 13)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 14)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 14)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 15)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 15)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 16)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 16)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 17)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 17)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 18)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 18)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 19)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 19)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 20)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 20)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 21)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 21)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 22)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 22)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 23)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 23)]));
  __syncthreads();
  *(float4*)(I_shared + (((int)threadIdx.x) * 4)) = *(float4*)(I + ((((((int)threadIdx.x) / 6) * 768) + ((((int)threadIdx.x) % 6) * 4)) + 408));
  W_shared[(((int)threadIdx.x) * 2)] = W[((((((int)blockIdx.x) * 4608) + ((((int)threadIdx.x) / 12) * 768)) + ((((int)threadIdx.x) % 12) * 2)) + 408)];
  W_shared[((((int)threadIdx.x) * 2) + 1)] = W[((((((int)blockIdx.x) * 4608) + ((((int)threadIdx.x) / 12) * 768)) + ((((int)threadIdx.x) % 12) * 2)) + 409)];
  W_shared[((((int)threadIdx.x) * 2) + 60)] = W[((((((int)blockIdx.x) * 4608) + (((((int)threadIdx.x) + 30) / 12) * 768)) + (((((int)threadIdx.x) * 2) + 12) % 24)) + 408)];
  W_shared[((((int)threadIdx.x) * 2) + 61)] = W[((((((int)blockIdx.x) * 4608) + (((((int)threadIdx.x) + 30) / 12) * 768)) + (((((int)threadIdx.x) * 2) + 13) % 24)) + 408)];
  if (((int)threadIdx.x) < 12) {
    W_shared[((((int)threadIdx.x) * 2) + 120)] = W[(((((int)blockIdx.x) * 4608) + (((int)threadIdx.x) * 2)) + 4248)];
    W_shared[((((int)threadIdx.x) * 2) + 121)] = W[(((((int)blockIdx.x) * 4608) + (((int)threadIdx.x) * 2)) + 4249)];
  }
  __syncthreads();
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[((((int)threadIdx.x) / 6) * 24)] * W_shared[((((int)threadIdx.x) % 6) * 24)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 1)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 1)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 2)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 2)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 3)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 3)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 4)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 4)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 5)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 5)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 6)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 6)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 7)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 7)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 8)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 8)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 9)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 9)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 10)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 10)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 11)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 11)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 12)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 12)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 13)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 13)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 14)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 14)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 15)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 15)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 16)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 16)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 17)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 17)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 18)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 18)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 19)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 19)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 20)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 20)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 21)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 21)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 22)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 22)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 23)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 23)]));
  __syncthreads();
  *(float4*)(I_shared + (((int)threadIdx.x) * 4)) = *(float4*)(I + ((((((int)threadIdx.x) / 6) * 768) + ((((int)threadIdx.x) % 6) * 4)) + 432));
  W_shared[(((int)threadIdx.x) * 2)] = W[((((((int)blockIdx.x) * 4608) + ((((int)threadIdx.x) / 12) * 768)) + ((((int)threadIdx.x) % 12) * 2)) + 432)];
  W_shared[((((int)threadIdx.x) * 2) + 1)] = W[((((((int)blockIdx.x) * 4608) + ((((int)threadIdx.x) / 12) * 768)) + ((((int)threadIdx.x) % 12) * 2)) + 433)];
  W_shared[((((int)threadIdx.x) * 2) + 60)] = W[((((((int)blockIdx.x) * 4608) + (((((int)threadIdx.x) + 30) / 12) * 768)) + (((((int)threadIdx.x) * 2) + 12) % 24)) + 432)];
  W_shared[((((int)threadIdx.x) * 2) + 61)] = W[((((((int)blockIdx.x) * 4608) + (((((int)threadIdx.x) + 30) / 12) * 768)) + (((((int)threadIdx.x) * 2) + 13) % 24)) + 432)];
  if (((int)threadIdx.x) < 12) {
    W_shared[((((int)threadIdx.x) * 2) + 120)] = W[(((((int)blockIdx.x) * 4608) + (((int)threadIdx.x) * 2)) + 4272)];
    W_shared[((((int)threadIdx.x) * 2) + 121)] = W[(((((int)blockIdx.x) * 4608) + (((int)threadIdx.x) * 2)) + 4273)];
  }
  __syncthreads();
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[((((int)threadIdx.x) / 6) * 24)] * W_shared[((((int)threadIdx.x) % 6) * 24)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 1)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 1)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 2)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 2)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 3)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 3)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 4)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 4)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 5)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 5)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 6)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 6)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 7)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 7)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 8)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 8)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 9)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 9)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 10)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 10)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 11)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 11)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 12)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 12)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 13)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 13)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 14)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 14)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 15)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 15)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 16)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 16)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 17)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 17)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 18)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 18)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 19)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 19)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 20)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 20)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 21)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 21)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 22)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 22)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 23)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 23)]));
  __syncthreads();
  *(float4*)(I_shared + (((int)threadIdx.x) * 4)) = *(float4*)(I + ((((((int)threadIdx.x) / 6) * 768) + ((((int)threadIdx.x) % 6) * 4)) + 456));
  W_shared[(((int)threadIdx.x) * 2)] = W[((((((int)blockIdx.x) * 4608) + ((((int)threadIdx.x) / 12) * 768)) + ((((int)threadIdx.x) % 12) * 2)) + 456)];
  W_shared[((((int)threadIdx.x) * 2) + 1)] = W[((((((int)blockIdx.x) * 4608) + ((((int)threadIdx.x) / 12) * 768)) + ((((int)threadIdx.x) % 12) * 2)) + 457)];
  W_shared[((((int)threadIdx.x) * 2) + 60)] = W[((((((int)blockIdx.x) * 4608) + (((((int)threadIdx.x) + 30) / 12) * 768)) + (((((int)threadIdx.x) * 2) + 12) % 24)) + 456)];
  W_shared[((((int)threadIdx.x) * 2) + 61)] = W[((((((int)blockIdx.x) * 4608) + (((((int)threadIdx.x) + 30) / 12) * 768)) + (((((int)threadIdx.x) * 2) + 13) % 24)) + 456)];
  if (((int)threadIdx.x) < 12) {
    W_shared[((((int)threadIdx.x) * 2) + 120)] = W[(((((int)blockIdx.x) * 4608) + (((int)threadIdx.x) * 2)) + 4296)];
    W_shared[((((int)threadIdx.x) * 2) + 121)] = W[(((((int)blockIdx.x) * 4608) + (((int)threadIdx.x) * 2)) + 4297)];
  }
  __syncthreads();
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[((((int)threadIdx.x) / 6) * 24)] * W_shared[((((int)threadIdx.x) % 6) * 24)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 1)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 1)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 2)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 2)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 3)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 3)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 4)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 4)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 5)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 5)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 6)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 6)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 7)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 7)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 8)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 8)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 9)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 9)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 10)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 10)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 11)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 11)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 12)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 12)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 13)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 13)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 14)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 14)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 15)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 15)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 16)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 16)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 17)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 17)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 18)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 18)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 19)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 19)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 20)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 20)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 21)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 21)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 22)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 22)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 23)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 23)]));
  __syncthreads();
  *(float4*)(I_shared + (((int)threadIdx.x) * 4)) = *(float4*)(I + ((((((int)threadIdx.x) / 6) * 768) + ((((int)threadIdx.x) % 6) * 4)) + 480));
  W_shared[(((int)threadIdx.x) * 2)] = W[((((((int)blockIdx.x) * 4608) + ((((int)threadIdx.x) / 12) * 768)) + ((((int)threadIdx.x) % 12) * 2)) + 480)];
  W_shared[((((int)threadIdx.x) * 2) + 1)] = W[((((((int)blockIdx.x) * 4608) + ((((int)threadIdx.x) / 12) * 768)) + ((((int)threadIdx.x) % 12) * 2)) + 481)];
  W_shared[((((int)threadIdx.x) * 2) + 60)] = W[((((((int)blockIdx.x) * 4608) + (((((int)threadIdx.x) + 30) / 12) * 768)) + (((((int)threadIdx.x) * 2) + 12) % 24)) + 480)];
  W_shared[((((int)threadIdx.x) * 2) + 61)] = W[((((((int)blockIdx.x) * 4608) + (((((int)threadIdx.x) + 30) / 12) * 768)) + (((((int)threadIdx.x) * 2) + 13) % 24)) + 480)];
  if (((int)threadIdx.x) < 12) {
    W_shared[((((int)threadIdx.x) * 2) + 120)] = W[(((((int)blockIdx.x) * 4608) + (((int)threadIdx.x) * 2)) + 4320)];
    W_shared[((((int)threadIdx.x) * 2) + 121)] = W[(((((int)blockIdx.x) * 4608) + (((int)threadIdx.x) * 2)) + 4321)];
  }
  __syncthreads();
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[((((int)threadIdx.x) / 6) * 24)] * W_shared[((((int)threadIdx.x) % 6) * 24)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 1)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 1)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 2)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 2)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 3)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 3)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 4)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 4)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 5)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 5)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 6)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 6)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 7)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 7)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 8)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 8)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 9)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 9)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 10)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 10)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 11)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 11)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 12)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 12)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 13)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 13)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 14)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 14)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 15)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 15)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 16)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 16)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 17)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 17)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 18)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 18)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 19)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 19)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 20)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 20)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 21)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 21)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 22)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 22)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 23)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 23)]));
  __syncthreads();
  *(float4*)(I_shared + (((int)threadIdx.x) * 4)) = *(float4*)(I + ((((((int)threadIdx.x) / 6) * 768) + ((((int)threadIdx.x) % 6) * 4)) + 504));
  W_shared[(((int)threadIdx.x) * 2)] = W[((((((int)blockIdx.x) * 4608) + ((((int)threadIdx.x) / 12) * 768)) + ((((int)threadIdx.x) % 12) * 2)) + 504)];
  W_shared[((((int)threadIdx.x) * 2) + 1)] = W[((((((int)blockIdx.x) * 4608) + ((((int)threadIdx.x) / 12) * 768)) + ((((int)threadIdx.x) % 12) * 2)) + 505)];
  W_shared[((((int)threadIdx.x) * 2) + 60)] = W[((((((int)blockIdx.x) * 4608) + (((((int)threadIdx.x) + 30) / 12) * 768)) + (((((int)threadIdx.x) * 2) + 12) % 24)) + 504)];
  W_shared[((((int)threadIdx.x) * 2) + 61)] = W[((((((int)blockIdx.x) * 4608) + (((((int)threadIdx.x) + 30) / 12) * 768)) + (((((int)threadIdx.x) * 2) + 13) % 24)) + 504)];
  if (((int)threadIdx.x) < 12) {
    W_shared[((((int)threadIdx.x) * 2) + 120)] = W[(((((int)blockIdx.x) * 4608) + (((int)threadIdx.x) * 2)) + 4344)];
    W_shared[((((int)threadIdx.x) * 2) + 121)] = W[(((((int)blockIdx.x) * 4608) + (((int)threadIdx.x) * 2)) + 4345)];
  }
  __syncthreads();
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[((((int)threadIdx.x) / 6) * 24)] * W_shared[((((int)threadIdx.x) % 6) * 24)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 1)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 1)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 2)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 2)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 3)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 3)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 4)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 4)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 5)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 5)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 6)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 6)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 7)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 7)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 8)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 8)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 9)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 9)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 10)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 10)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 11)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 11)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 12)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 12)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 13)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 13)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 14)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 14)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 15)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 15)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 16)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 16)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 17)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 17)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 18)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 18)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 19)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 19)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 20)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 20)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 21)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 21)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 22)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 22)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 23)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 23)]));
  __syncthreads();
  *(float4*)(I_shared + (((int)threadIdx.x) * 4)) = *(float4*)(I + ((((((int)threadIdx.x) / 6) * 768) + ((((int)threadIdx.x) % 6) * 4)) + 528));
  W_shared[(((int)threadIdx.x) * 2)] = W[((((((int)blockIdx.x) * 4608) + ((((int)threadIdx.x) / 12) * 768)) + ((((int)threadIdx.x) % 12) * 2)) + 528)];
  W_shared[((((int)threadIdx.x) * 2) + 1)] = W[((((((int)blockIdx.x) * 4608) + ((((int)threadIdx.x) / 12) * 768)) + ((((int)threadIdx.x) % 12) * 2)) + 529)];
  W_shared[((((int)threadIdx.x) * 2) + 60)] = W[((((((int)blockIdx.x) * 4608) + (((((int)threadIdx.x) + 30) / 12) * 768)) + (((((int)threadIdx.x) * 2) + 12) % 24)) + 528)];
  W_shared[((((int)threadIdx.x) * 2) + 61)] = W[((((((int)blockIdx.x) * 4608) + (((((int)threadIdx.x) + 30) / 12) * 768)) + (((((int)threadIdx.x) * 2) + 13) % 24)) + 528)];
  if (((int)threadIdx.x) < 12) {
    W_shared[((((int)threadIdx.x) * 2) + 120)] = W[(((((int)blockIdx.x) * 4608) + (((int)threadIdx.x) * 2)) + 4368)];
    W_shared[((((int)threadIdx.x) * 2) + 121)] = W[(((((int)blockIdx.x) * 4608) + (((int)threadIdx.x) * 2)) + 4369)];
  }
  __syncthreads();
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[((((int)threadIdx.x) / 6) * 24)] * W_shared[((((int)threadIdx.x) % 6) * 24)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 1)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 1)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 2)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 2)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 3)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 3)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 4)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 4)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 5)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 5)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 6)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 6)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 7)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 7)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 8)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 8)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 9)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 9)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 10)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 10)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 11)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 11)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 12)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 12)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 13)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 13)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 14)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 14)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 15)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 15)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 16)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 16)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 17)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 17)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 18)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 18)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 19)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 19)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 20)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 20)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 21)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 21)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 22)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 22)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 23)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 23)]));
  __syncthreads();
  *(float4*)(I_shared + (((int)threadIdx.x) * 4)) = *(float4*)(I + ((((((int)threadIdx.x) / 6) * 768) + ((((int)threadIdx.x) % 6) * 4)) + 552));
  W_shared[(((int)threadIdx.x) * 2)] = W[((((((int)blockIdx.x) * 4608) + ((((int)threadIdx.x) / 12) * 768)) + ((((int)threadIdx.x) % 12) * 2)) + 552)];
  W_shared[((((int)threadIdx.x) * 2) + 1)] = W[((((((int)blockIdx.x) * 4608) + ((((int)threadIdx.x) / 12) * 768)) + ((((int)threadIdx.x) % 12) * 2)) + 553)];
  W_shared[((((int)threadIdx.x) * 2) + 60)] = W[((((((int)blockIdx.x) * 4608) + (((((int)threadIdx.x) + 30) / 12) * 768)) + (((((int)threadIdx.x) * 2) + 12) % 24)) + 552)];
  W_shared[((((int)threadIdx.x) * 2) + 61)] = W[((((((int)blockIdx.x) * 4608) + (((((int)threadIdx.x) + 30) / 12) * 768)) + (((((int)threadIdx.x) * 2) + 13) % 24)) + 552)];
  if (((int)threadIdx.x) < 12) {
    W_shared[((((int)threadIdx.x) * 2) + 120)] = W[(((((int)blockIdx.x) * 4608) + (((int)threadIdx.x) * 2)) + 4392)];
    W_shared[((((int)threadIdx.x) * 2) + 121)] = W[(((((int)blockIdx.x) * 4608) + (((int)threadIdx.x) * 2)) + 4393)];
  }
  __syncthreads();
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[((((int)threadIdx.x) / 6) * 24)] * W_shared[((((int)threadIdx.x) % 6) * 24)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 1)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 1)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 2)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 2)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 3)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 3)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 4)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 4)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 5)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 5)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 6)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 6)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 7)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 7)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 8)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 8)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 9)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 9)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 10)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 10)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 11)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 11)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 12)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 12)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 13)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 13)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 14)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 14)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 15)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 15)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 16)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 16)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 17)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 17)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 18)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 18)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 19)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 19)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 20)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 20)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 21)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 21)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 22)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 22)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 23)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 23)]));
  __syncthreads();
  *(float4*)(I_shared + (((int)threadIdx.x) * 4)) = *(float4*)(I + ((((((int)threadIdx.x) / 6) * 768) + ((((int)threadIdx.x) % 6) * 4)) + 576));
  W_shared[(((int)threadIdx.x) * 2)] = W[((((((int)blockIdx.x) * 4608) + ((((int)threadIdx.x) / 12) * 768)) + ((((int)threadIdx.x) % 12) * 2)) + 576)];
  W_shared[((((int)threadIdx.x) * 2) + 1)] = W[((((((int)blockIdx.x) * 4608) + ((((int)threadIdx.x) / 12) * 768)) + ((((int)threadIdx.x) % 12) * 2)) + 577)];
  W_shared[((((int)threadIdx.x) * 2) + 60)] = W[((((((int)blockIdx.x) * 4608) + (((((int)threadIdx.x) + 30) / 12) * 768)) + (((((int)threadIdx.x) * 2) + 12) % 24)) + 576)];
  W_shared[((((int)threadIdx.x) * 2) + 61)] = W[((((((int)blockIdx.x) * 4608) + (((((int)threadIdx.x) + 30) / 12) * 768)) + (((((int)threadIdx.x) * 2) + 13) % 24)) + 576)];
  if (((int)threadIdx.x) < 12) {
    W_shared[((((int)threadIdx.x) * 2) + 120)] = W[(((((int)blockIdx.x) * 4608) + (((int)threadIdx.x) * 2)) + 4416)];
    W_shared[((((int)threadIdx.x) * 2) + 121)] = W[(((((int)blockIdx.x) * 4608) + (((int)threadIdx.x) * 2)) + 4417)];
  }
  __syncthreads();
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[((((int)threadIdx.x) / 6) * 24)] * W_shared[((((int)threadIdx.x) % 6) * 24)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 1)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 1)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 2)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 2)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 3)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 3)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 4)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 4)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 5)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 5)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 6)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 6)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 7)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 7)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 8)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 8)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 9)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 9)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 10)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 10)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 11)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 11)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 12)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 12)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 13)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 13)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 14)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 14)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 15)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 15)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 16)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 16)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 17)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 17)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 18)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 18)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 19)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 19)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 20)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 20)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 21)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 21)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 22)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 22)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 23)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 23)]));
  __syncthreads();
  *(float4*)(I_shared + (((int)threadIdx.x) * 4)) = *(float4*)(I + ((((((int)threadIdx.x) / 6) * 768) + ((((int)threadIdx.x) % 6) * 4)) + 600));
  W_shared[(((int)threadIdx.x) * 2)] = W[((((((int)blockIdx.x) * 4608) + ((((int)threadIdx.x) / 12) * 768)) + ((((int)threadIdx.x) % 12) * 2)) + 600)];
  W_shared[((((int)threadIdx.x) * 2) + 1)] = W[((((((int)blockIdx.x) * 4608) + ((((int)threadIdx.x) / 12) * 768)) + ((((int)threadIdx.x) % 12) * 2)) + 601)];
  W_shared[((((int)threadIdx.x) * 2) + 60)] = W[((((((int)blockIdx.x) * 4608) + (((((int)threadIdx.x) + 30) / 12) * 768)) + (((((int)threadIdx.x) * 2) + 12) % 24)) + 600)];
  W_shared[((((int)threadIdx.x) * 2) + 61)] = W[((((((int)blockIdx.x) * 4608) + (((((int)threadIdx.x) + 30) / 12) * 768)) + (((((int)threadIdx.x) * 2) + 13) % 24)) + 600)];
  if (((int)threadIdx.x) < 12) {
    W_shared[((((int)threadIdx.x) * 2) + 120)] = W[(((((int)blockIdx.x) * 4608) + (((int)threadIdx.x) * 2)) + 4440)];
    W_shared[((((int)threadIdx.x) * 2) + 121)] = W[(((((int)blockIdx.x) * 4608) + (((int)threadIdx.x) * 2)) + 4441)];
  }
  __syncthreads();
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[((((int)threadIdx.x) / 6) * 24)] * W_shared[((((int)threadIdx.x) % 6) * 24)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 1)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 1)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 2)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 2)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 3)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 3)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 4)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 4)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 5)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 5)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 6)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 6)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 7)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 7)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 8)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 8)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 9)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 9)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 10)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 10)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 11)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 11)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 12)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 12)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 13)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 13)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 14)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 14)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 15)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 15)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 16)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 16)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 17)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 17)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 18)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 18)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 19)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 19)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 20)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 20)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 21)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 21)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 22)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 22)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 23)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 23)]));
  __syncthreads();
  *(float4*)(I_shared + (((int)threadIdx.x) * 4)) = *(float4*)(I + ((((((int)threadIdx.x) / 6) * 768) + ((((int)threadIdx.x) % 6) * 4)) + 624));
  W_shared[(((int)threadIdx.x) * 2)] = W[((((((int)blockIdx.x) * 4608) + ((((int)threadIdx.x) / 12) * 768)) + ((((int)threadIdx.x) % 12) * 2)) + 624)];
  W_shared[((((int)threadIdx.x) * 2) + 1)] = W[((((((int)blockIdx.x) * 4608) + ((((int)threadIdx.x) / 12) * 768)) + ((((int)threadIdx.x) % 12) * 2)) + 625)];
  W_shared[((((int)threadIdx.x) * 2) + 60)] = W[((((((int)blockIdx.x) * 4608) + (((((int)threadIdx.x) + 30) / 12) * 768)) + (((((int)threadIdx.x) * 2) + 12) % 24)) + 624)];
  W_shared[((((int)threadIdx.x) * 2) + 61)] = W[((((((int)blockIdx.x) * 4608) + (((((int)threadIdx.x) + 30) / 12) * 768)) + (((((int)threadIdx.x) * 2) + 13) % 24)) + 624)];
  if (((int)threadIdx.x) < 12) {
    W_shared[((((int)threadIdx.x) * 2) + 120)] = W[(((((int)blockIdx.x) * 4608) + (((int)threadIdx.x) * 2)) + 4464)];
    W_shared[((((int)threadIdx.x) * 2) + 121)] = W[(((((int)blockIdx.x) * 4608) + (((int)threadIdx.x) * 2)) + 4465)];
  }
  __syncthreads();
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[((((int)threadIdx.x) / 6) * 24)] * W_shared[((((int)threadIdx.x) % 6) * 24)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 1)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 1)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 2)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 2)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 3)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 3)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 4)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 4)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 5)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 5)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 6)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 6)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 7)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 7)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 8)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 8)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 9)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 9)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 10)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 10)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 11)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 11)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 12)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 12)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 13)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 13)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 14)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 14)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 15)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 15)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 16)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 16)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 17)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 17)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 18)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 18)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 19)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 19)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 20)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 20)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 21)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 21)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 22)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 22)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 23)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 23)]));
  __syncthreads();
  *(float4*)(I_shared + (((int)threadIdx.x) * 4)) = *(float4*)(I + ((((((int)threadIdx.x) / 6) * 768) + ((((int)threadIdx.x) % 6) * 4)) + 648));
  W_shared[(((int)threadIdx.x) * 2)] = W[((((((int)blockIdx.x) * 4608) + ((((int)threadIdx.x) / 12) * 768)) + ((((int)threadIdx.x) % 12) * 2)) + 648)];
  W_shared[((((int)threadIdx.x) * 2) + 1)] = W[((((((int)blockIdx.x) * 4608) + ((((int)threadIdx.x) / 12) * 768)) + ((((int)threadIdx.x) % 12) * 2)) + 649)];
  W_shared[((((int)threadIdx.x) * 2) + 60)] = W[((((((int)blockIdx.x) * 4608) + (((((int)threadIdx.x) + 30) / 12) * 768)) + (((((int)threadIdx.x) * 2) + 12) % 24)) + 648)];
  W_shared[((((int)threadIdx.x) * 2) + 61)] = W[((((((int)blockIdx.x) * 4608) + (((((int)threadIdx.x) + 30) / 12) * 768)) + (((((int)threadIdx.x) * 2) + 13) % 24)) + 648)];
  if (((int)threadIdx.x) < 12) {
    W_shared[((((int)threadIdx.x) * 2) + 120)] = W[(((((int)blockIdx.x) * 4608) + (((int)threadIdx.x) * 2)) + 4488)];
    W_shared[((((int)threadIdx.x) * 2) + 121)] = W[(((((int)blockIdx.x) * 4608) + (((int)threadIdx.x) * 2)) + 4489)];
  }
  __syncthreads();
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[((((int)threadIdx.x) / 6) * 24)] * W_shared[((((int)threadIdx.x) % 6) * 24)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 1)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 1)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 2)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 2)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 3)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 3)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 4)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 4)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 5)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 5)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 6)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 6)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 7)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 7)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 8)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 8)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 9)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 9)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 10)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 10)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 11)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 11)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 12)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 12)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 13)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 13)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 14)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 14)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 15)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 15)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 16)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 16)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 17)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 17)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 18)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 18)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 19)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 19)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 20)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 20)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 21)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 21)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 22)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 22)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 23)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 23)]));
  __syncthreads();
  *(float4*)(I_shared + (((int)threadIdx.x) * 4)) = *(float4*)(I + ((((((int)threadIdx.x) / 6) * 768) + ((((int)threadIdx.x) % 6) * 4)) + 672));
  W_shared[(((int)threadIdx.x) * 2)] = W[((((((int)blockIdx.x) * 4608) + ((((int)threadIdx.x) / 12) * 768)) + ((((int)threadIdx.x) % 12) * 2)) + 672)];
  W_shared[((((int)threadIdx.x) * 2) + 1)] = W[((((((int)blockIdx.x) * 4608) + ((((int)threadIdx.x) / 12) * 768)) + ((((int)threadIdx.x) % 12) * 2)) + 673)];
  W_shared[((((int)threadIdx.x) * 2) + 60)] = W[((((((int)blockIdx.x) * 4608) + (((((int)threadIdx.x) + 30) / 12) * 768)) + (((((int)threadIdx.x) * 2) + 12) % 24)) + 672)];
  W_shared[((((int)threadIdx.x) * 2) + 61)] = W[((((((int)blockIdx.x) * 4608) + (((((int)threadIdx.x) + 30) / 12) * 768)) + (((((int)threadIdx.x) * 2) + 13) % 24)) + 672)];
  if (((int)threadIdx.x) < 12) {
    W_shared[((((int)threadIdx.x) * 2) + 120)] = W[(((((int)blockIdx.x) * 4608) + (((int)threadIdx.x) * 2)) + 4512)];
    W_shared[((((int)threadIdx.x) * 2) + 121)] = W[(((((int)blockIdx.x) * 4608) + (((int)threadIdx.x) * 2)) + 4513)];
  }
  __syncthreads();
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[((((int)threadIdx.x) / 6) * 24)] * W_shared[((((int)threadIdx.x) % 6) * 24)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 1)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 1)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 2)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 2)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 3)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 3)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 4)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 4)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 5)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 5)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 6)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 6)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 7)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 7)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 8)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 8)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 9)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 9)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 10)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 10)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 11)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 11)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 12)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 12)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 13)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 13)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 14)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 14)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 15)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 15)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 16)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 16)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 17)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 17)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 18)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 18)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 19)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 19)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 20)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 20)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 21)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 21)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 22)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 22)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 23)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 23)]));
  __syncthreads();
  *(float4*)(I_shared + (((int)threadIdx.x) * 4)) = *(float4*)(I + ((((((int)threadIdx.x) / 6) * 768) + ((((int)threadIdx.x) % 6) * 4)) + 696));
  W_shared[(((int)threadIdx.x) * 2)] = W[((((((int)blockIdx.x) * 4608) + ((((int)threadIdx.x) / 12) * 768)) + ((((int)threadIdx.x) % 12) * 2)) + 696)];
  W_shared[((((int)threadIdx.x) * 2) + 1)] = W[((((((int)blockIdx.x) * 4608) + ((((int)threadIdx.x) / 12) * 768)) + ((((int)threadIdx.x) % 12) * 2)) + 697)];
  W_shared[((((int)threadIdx.x) * 2) + 60)] = W[((((((int)blockIdx.x) * 4608) + (((((int)threadIdx.x) + 30) / 12) * 768)) + (((((int)threadIdx.x) * 2) + 12) % 24)) + 696)];
  W_shared[((((int)threadIdx.x) * 2) + 61)] = W[((((((int)blockIdx.x) * 4608) + (((((int)threadIdx.x) + 30) / 12) * 768)) + (((((int)threadIdx.x) * 2) + 13) % 24)) + 696)];
  if (((int)threadIdx.x) < 12) {
    W_shared[((((int)threadIdx.x) * 2) + 120)] = W[(((((int)blockIdx.x) * 4608) + (((int)threadIdx.x) * 2)) + 4536)];
    W_shared[((((int)threadIdx.x) * 2) + 121)] = W[(((((int)blockIdx.x) * 4608) + (((int)threadIdx.x) * 2)) + 4537)];
  }
  __syncthreads();
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[((((int)threadIdx.x) / 6) * 24)] * W_shared[((((int)threadIdx.x) % 6) * 24)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 1)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 1)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 2)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 2)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 3)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 3)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 4)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 4)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 5)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 5)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 6)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 6)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 7)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 7)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 8)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 8)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 9)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 9)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 10)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 10)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 11)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 11)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 12)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 12)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 13)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 13)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 14)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 14)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 15)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 15)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 16)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 16)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 17)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 17)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 18)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 18)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 19)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 19)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 20)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 20)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 21)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 21)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 22)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 22)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 23)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 23)]));
  __syncthreads();
  *(float4*)(I_shared + (((int)threadIdx.x) * 4)) = *(float4*)(I + ((((((int)threadIdx.x) / 6) * 768) + ((((int)threadIdx.x) % 6) * 4)) + 720));
  W_shared[(((int)threadIdx.x) * 2)] = W[((((((int)blockIdx.x) * 4608) + ((((int)threadIdx.x) / 12) * 768)) + ((((int)threadIdx.x) % 12) * 2)) + 720)];
  W_shared[((((int)threadIdx.x) * 2) + 1)] = W[((((((int)blockIdx.x) * 4608) + ((((int)threadIdx.x) / 12) * 768)) + ((((int)threadIdx.x) % 12) * 2)) + 721)];
  W_shared[((((int)threadIdx.x) * 2) + 60)] = W[((((((int)blockIdx.x) * 4608) + (((((int)threadIdx.x) + 30) / 12) * 768)) + (((((int)threadIdx.x) * 2) + 12) % 24)) + 720)];
  W_shared[((((int)threadIdx.x) * 2) + 61)] = W[((((((int)blockIdx.x) * 4608) + (((((int)threadIdx.x) + 30) / 12) * 768)) + (((((int)threadIdx.x) * 2) + 13) % 24)) + 720)];
  if (((int)threadIdx.x) < 12) {
    W_shared[((((int)threadIdx.x) * 2) + 120)] = W[(((((int)blockIdx.x) * 4608) + (((int)threadIdx.x) * 2)) + 4560)];
    W_shared[((((int)threadIdx.x) * 2) + 121)] = W[(((((int)blockIdx.x) * 4608) + (((int)threadIdx.x) * 2)) + 4561)];
  }
  __syncthreads();
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[((((int)threadIdx.x) / 6) * 24)] * W_shared[((((int)threadIdx.x) % 6) * 24)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 1)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 1)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 2)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 2)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 3)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 3)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 4)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 4)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 5)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 5)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 6)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 6)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 7)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 7)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 8)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 8)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 9)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 9)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 10)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 10)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 11)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 11)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 12)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 12)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 13)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 13)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 14)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 14)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 15)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 15)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 16)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 16)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 17)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 17)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 18)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 18)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 19)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 19)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 20)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 20)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 21)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 21)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 22)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 22)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 23)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 23)]));
  __syncthreads();
  *(float4*)(I_shared + (((int)threadIdx.x) * 4)) = *(float4*)(I + ((((((int)threadIdx.x) / 6) * 768) + ((((int)threadIdx.x) % 6) * 4)) + 744));
  W_shared[(((int)threadIdx.x) * 2)] = W[((((((int)blockIdx.x) * 4608) + ((((int)threadIdx.x) / 12) * 768)) + ((((int)threadIdx.x) % 12) * 2)) + 744)];
  W_shared[((((int)threadIdx.x) * 2) + 1)] = W[((((((int)blockIdx.x) * 4608) + ((((int)threadIdx.x) / 12) * 768)) + ((((int)threadIdx.x) % 12) * 2)) + 745)];
  W_shared[((((int)threadIdx.x) * 2) + 60)] = W[((((((int)blockIdx.x) * 4608) + (((((int)threadIdx.x) + 30) / 12) * 768)) + (((((int)threadIdx.x) * 2) + 12) % 24)) + 744)];
  W_shared[((((int)threadIdx.x) * 2) + 61)] = W[((((((int)blockIdx.x) * 4608) + (((((int)threadIdx.x) + 30) / 12) * 768)) + (((((int)threadIdx.x) * 2) + 13) % 24)) + 744)];
  if (((int)threadIdx.x) < 12) {
    W_shared[((((int)threadIdx.x) * 2) + 120)] = W[(((((int)blockIdx.x) * 4608) + (((int)threadIdx.x) * 2)) + 4584)];
    W_shared[((((int)threadIdx.x) * 2) + 121)] = W[(((((int)blockIdx.x) * 4608) + (((int)threadIdx.x) * 2)) + 4585)];
  }
  __syncthreads();
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[((((int)threadIdx.x) / 6) * 24)] * W_shared[((((int)threadIdx.x) % 6) * 24)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 1)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 1)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 2)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 2)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 3)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 3)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 4)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 4)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 5)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 5)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 6)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 6)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 7)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 7)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 8)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 8)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 9)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 9)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 10)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 10)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 11)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 11)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 12)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 12)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 13)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 13)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 14)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 14)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 15)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 15)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 16)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 16)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 17)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 17)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 18)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 18)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 19)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 19)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 20)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 20)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 21)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 21)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 22)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 22)]));
  T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (I_shared[(((((int)threadIdx.x) / 6) * 24) + 23)] * W_shared[(((((int)threadIdx.x) % 6) * 24) + 23)]));
  T_batch_matmul_NT[((((((int)threadIdx.x) / 6) * 768) + (((int)blockIdx.x) * 6)) + (((int)threadIdx.x) % 6))] = T_batch_matmul_NT_local[0];
}


